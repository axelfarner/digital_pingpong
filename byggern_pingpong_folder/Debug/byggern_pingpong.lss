
byggern_pingpong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f2  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000211  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
	
	//PORTA &= ~(1 << PA0);
	
	while (1) 
    {
		PORTA |= (1 << PA0);	
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	8b bb       	out	0x1b, r24	; 27
		while (i < delay)
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	dc 01       	movw	r26, r24
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x14>
		{
			i++;
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	a1 1d       	adc	r26, r1
  9a:	b1 1d       	adc	r27, r1
	//PORTA &= ~(1 << PA0);
	
	while (1) 
    {
		PORTA |= (1 << PA0);	
		while (i < delay)
  9c:	80 3a       	cpi	r24, 0xA0	; 160
  9e:	26 e8       	ldi	r18, 0x86	; 134
  a0:	92 07       	cpc	r25, r18
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a2 07       	cpc	r26, r18
  a6:	b1 05       	cpc	r27, r1
  a8:	b0 f3       	brcs	.-20     	; 0x96 <main+0xe>
		{
			i++;
		}
		i = 0;

		PORTA &= ~(1 << PA0);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << PA0);	
		while (i < delay)
		{
			i++;
		}
		i = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	dc 01       	movw	r26, r24

		PORTA &= ~(1 << PA0);

		while (i < delay)
  b6:	03 c0       	rjmp	.+6      	; 0xbe <main+0x36>
		{
			i++;
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	a1 1d       	adc	r26, r1
  bc:	b1 1d       	adc	r27, r1
		}
		i = 0;

		PORTA &= ~(1 << PA0);

		while (i < delay)
  be:	80 3a       	cpi	r24, 0xA0	; 160
  c0:	26 e8       	ldi	r18, 0x86	; 134
  c2:	92 07       	cpc	r25, r18
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a2 07       	cpc	r26, r18
  c8:	b1 05       	cpc	r27, r1
  ca:	b0 f3       	brcs	.-20     	; 0xb8 <main+0x30>
  cc:	dd cf       	rjmp	.-70     	; 0x88 <main>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
